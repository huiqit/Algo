/*
#1 Reverse a singly LinkedList. (two approaches, iterative + recursive) 
// class ListNode {
// int v;
// ListNode next;
// }
// return reversed linked list head
*/

/*
Assumption: the LinkedList could be null. no assumption.
test case: 
  null | null
  1->null | 1->null
  1->2->3->null | 3->2->1->null
/*
/*
Recursive way:
n is the number of ListNode
Time = O(n), go through all nodes
Space = O(n), call stack has n levels
*/
public ListNode reverse(ListNode head) {
   if(head == null || head.next == null) {
       return head;
   }
   ListNode newHead = reverse(head.next);
   head.next.next = head;
   head.next = null;
   return newHead;
}
/*
Iterative way:
n is the number of ListNode
Time = O(n), go through all nodes
Space = O(1), no extra space
*/
public ListNode reverse(ListNode head){
  if(head == null || head.next ==null) {
      return head;
  }
  ListNode curr = head;
  ListNode prev = null;
  while(curr != null) {
    ListNode nxt = curr.next;
    //reverse the current node
    curr.next = prev;
    //move curr and prev to next one
    curr = nxt;
    prev = curr;
  }
  //the prev node is the last node in the previous LinkedList
  return prev;
}


