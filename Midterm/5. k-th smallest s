/*
#5 Given two sorted arrays A and B, with their sizes to be m and n, respectively. 

We can pick one element a from A and the other element b from B, and their sum s is defined to be s = a + b. 

How to find k-th smallest s from all possible values of s. 

Assumption: k < m * n. e.g. A = {1, 3, 5}, B = {2, 3}, k = 1, the result is A[0] + B[0] = 3 k = 2, the result is A[0] + B[1] = 4 k = 3, the result is A[1] + B[0] = 5
*/

/*
Clarify:
the element type is int, A and B should not be null or empty
k >= 1
A[m] = {1, 3, 5}
B[n] = {2, 3}
s = a + b
s1 = 1 + 2 = 3
s2 = 1 + 3 = 4
s3 = 3 + 2 = 5
naive way: put all s in a minheap, poll kth
the other way: generate & expand
*/
//Time = O(k^2(logk)), two for loop & minHeap offer
//Space = O(k^2), minHeap size
public int midterm(int[] A, int[] B, int k) {
  //corner case -> assumption
  PriorityQueue<Integer> minHeap = new PriorityQueue<>();
  for(int i = 0; i < Math.min(k, A.length); i++) {
    for(int j = 0; j < Math.min(k, B.length); j++) {
      minHeap.offer(A[i] + B[j]); 
    }
  }
  //poll k-1 element
  for(int i = 1; i < k; i++) {
    minHeap.poll();
  }
  return minHeap.peek();
}



