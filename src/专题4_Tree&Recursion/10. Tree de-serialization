/*
pre-order & in-order
eg: 
     10
    /  \
   20   30
  / \   / \
 5   6 7   8
preOrder: 10 | 20 5 6 | 30 7 8 -> root
inOrder : 5 20 6 | 10 | 7 30 8 -> idxMap
Here we use the first element in preOrder to get the root,
and map it in inOrder array, from its index, we know the leftSize.
*/
public TreeNode construct(int[] preOrder, int[] inOrder) {
  if(inOrder == null || preOrder == null) {
    return null;
  }
  Map<Integer, Integer> idxMap = new HashMap<>();
  for(int i = 0; i < inOrder.length; i++) {
    idxMap.put(i, inOrder[i]);
  }
  return construct(preOrder, 
}
private TreeNode construct(int[] preOrder, int preLeft, int preRight, Map<Integer, Integer> idxMap, int inLeft, int inRight) {
  //base case
  if(preLeft > preRight) {
    return null;
  }
  
  //recursion rule
  TreeNode root = new TreeNode(preOrder[preLeft]);
  int leftSize = idxMap.get(root.key) - inLeft;
  root.left = construct(preOrder, preLeft+1, preLeft+leftSize, idxMap, inLeft, inLeft+leftsize-1);
  
  root.right = construct(preOrder, preLeft+leftSize+1, preRight, idxMap, inLeft
  
  return root;
}

  

