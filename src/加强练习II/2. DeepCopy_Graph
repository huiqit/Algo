/*
map.values() -> ssssss
return ArrayList<GraphNode>(map.values());
*/
/*
* class GraphNode {
*   public int key;
*   public List<GraphNode> neighbors;
*   public GraphNode(int key) {
*     this.key = key;
*     this.neighbors = new ArrayList<GraphNode>();
*   }
* }
*/
public class Solution {
  public List<GraphNode> copy(List<GraphNode> graph) {
    // Write your solution here.
    //not null
    //data structure: map<GN, GN>, queue: expand & generate
    Map<GraphNode, GraphNode> map = new HashMap<>();
    Queue<GraphNode> q = new ArrayDeque<>();
    for(GraphNode node : graph) {
      copy(node, map, q);
    }
    return new ArrayList<GraphNode>(map.values());
  }
  private void copy(GraphNode node, Map<GraphNode, GraphNode> map, Queue<GraphNode> q) {
    if(node == null) {
      return;
    }
    q.offer(node);
    GraphNode nodeCopy = new GraphNode(node.key);
    if(!map.containsKey(node)) {
      map.put(node, nodeCopy);
    }
    while(!q.isEmpty()) {
      GraphNode curr = q.poll();
      GraphNode currCopy = new GraphNode(curr.key);
      map.put(curr, currCopy);
      for(GraphNode nei : curr.neighbors) {
        GraphNode neiCopy = new GraphNode(nei.key);
        if(!map.containsKey(nei)) {
          map.put(nei, neiCopy);
        }
        currCopy.neighbors.add(neiCopy);
      }
    }
  }
}


public class Solution {
  public List<GraphNode> copy(List<GraphNode> graph) {
    Map<GraphNode, GraphNode> map = new HashMap<>();
    List<GraphNode> res = new ArrayList<>();
    for(GraphNode node : graph) {
      res.add(copy(node, map));
    }
    return res;
  }
  private GraphNode copy(GraphNode node, Map<GraphNode, GraphNode> map) {
    //return the copied node
    if(node == null) {
      return null;
    }
    if(map.containsKey(node)) {
      return map.get(node);
    }
    GraphNode nodeCopy = new GraphNode(node.key);
    map.put(node, nodeCopy);
    for(GraphNode nei : node.neighbors) {
      nodeCopy.neighbors.add(copy(nei, map));
    }
    return nodeCopy;

  }
}
 
