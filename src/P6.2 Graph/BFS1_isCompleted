public boolean isCompleted(TreeNode root) {
  if(root == null) {
    return true;
  }
  boolean flag = false; //not havde null
  Queue<TreeNode> q = new ArrayDeque<>();
  q.offer(root);
  while(q.isEmpty()) {  -> 这里就错了
    TreeNode tmp = q.poll();
    if(tmp.left != null && !flag) {
      q.offer(tmp.left);
    } else if(flag) {
      return false;
    } else {
      flag = true;
    }
    
    if(tmp.right != null && !flag) {
      q.offer(tmp.right);
    } else if (flag) {
      return false;
    } else {
      flag = true;
    }
  }
  return true;
}

******************
// 用一个if嵌套，把意思表述清楚。就2个情况
public class Solution {
  public boolean isCompleted(TreeNode root) {
    if (root == null) {
      return true;
    }
    
    boolean nullAppeared = false;
    Queue<TreeNode> queue = new ArrayDeque<>();
    queue.offer(root);
    while (!queue.isEmpty()) {
      TreeNode node = queue.poll();
      if (node.left != null) {
        if (nullAppeared) {
          return false;
        } else {
          queue.offer(node.left);
        }
      } else {
        nullAppeared = true;
      }
    }
    
    return true;
  }
}
    
