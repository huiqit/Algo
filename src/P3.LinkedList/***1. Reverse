/*
clarify: single linked list
A
L = null, return null;
L = 1->null, return 1->null;
L = 1->2->3->null, return 3->2->1->null.
*/
//sol1: iterative way
public ListNode reverse(ListNode head) {
  if(head == null || head.next == null) {
    return head;
  }
  ListNode prev = null;
  ListNode curr = head;
  while(curr != null) {
    ListNode nxt = curr.next;
    curr.next = prev;
    prev = curr;
    curr = nxt;
  }
  return prev;
}
//sol2: recurisively
public ListNode reverse(ListNode head){
  if(head == null || head.next == null) {
    return head;
  }
  ListNode newHead = reverse(head.next);
  head.next.next = head;
  head.next = null;
  return newHead;
}
